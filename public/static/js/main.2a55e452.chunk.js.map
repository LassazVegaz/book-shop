{"version":3,"sources":["serviceWorker.js","utils/Connector.ts","pages/Books/components/Header.tsx","components/LoadingScreen.tsx","pages/Books/components/TableArea.tsx","components/ErrorAlert.tsx","pages/Books/Books.tsx","pages/PageNotFound/PageNotFound.tsx","pages/SignIn/SignIn.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Connector","error","isAxiosError","console","log","response","status","Error","isFirstRun","initialize","a","axios","defaults","withCredentials","headers","common","getAuth","get","x","LogIn","loginData","post","data","success","handleAPIError","LogOut","GetBooks","myBooks","result","books","BuyOrRemoveBook","buy","bookID","book_id","SearchArea","props","React","searchBy","setSearchBy","searchText","setSearchText","Form","inline","className","Label","Control","as","onChange","e","target","value","FormControl","type","placeholder","onSearch","Button","variant","Header","logOut","setLogOut","Navbar","bg","expand","fixed","Toggle","aria-controls","Collapse","id","Nav","Link","to","active","myBooksLink","onClick","ev","onLoading","preventDefault","then","catch","onError","finally","LoadingScreen","style","display","show","spinner","text","TableRow","buttonCaption","buttonVariant","isMyBook","book","title","description","genre","price","toFixed","TableArea","Table","striped","hover","map","isMyBooksSet","key","ErrorAlert","Alert","dismissible","onClose","Books","isLoading","setIsLoading","isLoggedIn","setIsLoggedIn","setBooks","setError","searchedBooks","setSearchedBooks","history","useHistory","booksType","useParams","replace","isMyBooksPage","unmounted","err","message","_books","filter","bk","toLowerCase","toLocaleLowerCase","includes","length","slice","index","findIndex","splice","PageNotFound","height","justifyContent","alignItems","src","alt","InputField","SignIn","email","setEmail","password","setPassword","loading","setLoading","loggedIn","setLoggedIn","handleClick","res","val","disabled","App","useEffect","baseURL","exact","path","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2a55e452.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, { AxiosError } from \"axios\";\nimport { Book } from \"../models\";\n\nconst URL_COOKIES = \"http://localhost:8000/sanctum/csrf-cookie\";\n\nconst URL_LOGIN = \"http://localhost:8000/api/users/login\";\n\nconst URL_LOGOUT = \"http://localhost:8000/api/users/current/logout\";\n\nconst URL_AVAILABLE_BOOKS = \"http://localhost:8000/api/books/available\";\n\nconst URL_MY_BOOKS = \"http://localhost:8000/api/users/current/books\";\n\nconst URL_BUY_BOOK = \"http://localhost:8000/api/users/current/books/buy\";\n\nconst URL_REMOVE_BOOK = \"http://localhost:8000/api/users/current/books/remove\";\n\n/**\n * Interface for logging data\n */\ninterface ILoginData {\n    email: string;\n    password: string;\n}\n\n/**\n * A typical response from an API call\n */\nexport interface Response {\n    success: boolean;\n    message: string;\n    result?: any;\n}\n\n/**\n * Books API response\n */\ninterface BooksResponse extends Response {\n    result: {\n        books: Book[];\n    };\n}\n\n/**\n * Login API response\n */\ninterface LogInResponse extends Response {\n    result: {\n        token: string;\n    };\n}\n\n/**\n * Connector utilities\n */\nclass Connector {\n    /**\n     * Detects if this is the first run\n     */\n    private static isFirstRun = true;\n\n    /**\n     * Get authorizations and set Axios defaults if this is the first run\n     */\n    private static initialize = async () => {\n        if (Connector.isFirstRun) {\n            // enable credentials in axios\n            axios.defaults.withCredentials = true;\n            axios.defaults.headers.common[\"Accept\"] = \"application/json\";\n\n            // get sanctum cookie\n            await Connector.getAuth();\n\n            // turn off first run\n            Connector.isFirstRun = false;\n        }\n    };\n\n    /**\n     * Get authorization to connect with backend\n     */\n    private static getAuth = async () => {\n        // get sanctum cookie\n        await axios.get<Response>(URL_COOKIES);\n    };\n\n    /**\n     * Detects if the error is AxiosError\n     */\n    private static isAxiosError = (x: any): x is AxiosError => {\n        return typeof x.isAxiosError === \"boolean\";\n    };\n\n    /**\n     * Handle API response errors\n     */\n    private static handleAPIError(error: any) {\n        if (Connector.isAxiosError(error)) {\n            console.log(error.response);\n            if (error.response?.status === 401) throw new Error(\"401\");\n        } else {\n            console.log(\"error is not axios\");\n        }\n        throw error;\n    }\n\n    /**\n     * Login\n     */\n    public static LogIn = async (loginData: ILoginData) => {\n        try {\n            // intialize\n            await Connector.initialize();\n\n            // login\n            const response = await axios.post<LogInResponse>(\n                URL_LOGIN,\n                loginData\n            );\n\n            // return response success\n            return response.data.success;\n        } catch (error) {\n            Connector.handleAPIError(error);\n        }\n    };\n\n    /**\n     * Logout\n     */\n    public static LogOut = async () => {\n        try {\n            // logout\n            const response = await axios.post<Response>(URL_LOGOUT);\n\n            // return response success\n            return response.data.success;\n        } catch (error) {\n            Connector.handleAPIError(error);\n        }\n    };\n\n    /**\n     * Get books\n     * @param myBooks If true books belong to current user will be returned\n     */\n    public static GetBooks = async (myBooks: boolean) => {\n        try {\n            // get available or bought books books\n            const response = await axios.get<BooksResponse>(\n                myBooks ? URL_MY_BOOKS : URL_AVAILABLE_BOOKS\n            );\n\n            // return books\n            return response.data.result.books;\n        } catch (error) {\n            Connector.handleAPIError(error);\n        }\n    };\n\n    /**\n     * Buy or remove book\n     */\n    public static BuyOrRemoveBook = async (buy: boolean, bookID: number) => {\n        try {\n            // buy or remove book\n            const response = await axios.post(\n                buy ? URL_BUY_BOOK : URL_REMOVE_BOOK,\n                { book_id: bookID }\n            );\n\n            // return response success\n            return response.data.success;\n        } catch (error) {\n            Connector.handleAPIError(error);\n        }\n    };\n}\n\nexport default Connector;\n","import * as React from \"react\";\nimport { Button, Form, FormControl, Nav, Navbar } from \"react-bootstrap\";\nimport { Link, Redirect } from \"react-router-dom\";\n\nimport Connector from \"../../../utils/Connector\";\n\nimport \"./Header.css\";\n\ntype OnSearchCallback = (searchBy: string, searchText: string) => void;\n\n/**\n * Search area with search box and search by options\n */\nconst SearchArea = (props: { onSearch: OnSearchCallback }) => {\n    // states\n    const [searchBy, setSearchBy] = React.useState(\"Title\");\n    const [searchText, setSearchText] = React.useState(\"\");\n\n    return (\n        <Form inline className=\"search-area\">\n            <Form.Label>Search By</Form.Label>\n            <Form.Control\n                as=\"select\"\n                onChange={(e) => setSearchBy(e.target.value)}\n                value={searchBy}\n            >\n                <option>Title</option>\n                <option>Description</option>\n                <option>Genre</option>\n            </Form.Control>\n\n            <FormControl\n                type=\"text\"\n                placeholder=\"Search\"\n                className=\"mr-sm-2 search-box\"\n                value={searchText}\n                onChange={(e) => {\n                    setSearchText(e.target.value);\n                    props.onSearch(searchBy, searchText);\n                }}\n            />\n\n            <Button variant=\"outline-dark\">Search</Button>\n        </Form>\n    );\n};\n\n/**\n * Header for Books page\n */\nconst Header = (props: {\n    myBooksLink: boolean;\n    onLoading: (isLoading: boolean) => void;\n    onError: (err: string) => void;\n    onSearch: OnSearchCallback;\n}) => {\n    // states\n    const [logOut, setLogOut] = React.useState(false);\n\n    // handle log out click\n    const handleClick_logOut = (ev: React.MouseEvent) => {\n        props.onLoading(true);\n        // prevent link's default action\n        ev.preventDefault();\n        // log out\n        Connector.LogOut()\n            .then(() => setLogOut(true))\n            .catch(() => props.onError(\"Check your internet connection\"))\n            .finally(() => props.onLoading(false));\n    };\n\n    return (\n        <>\n            <div className=\"books-header\">\n                <Navbar bg=\"primary\" variant=\"dark\" expand=\"lg\" fixed=\"top\">\n                    <Navbar.Toggle aria-controls=\"navigator\" />\n                    <Navbar.Collapse id=\"navigator\">\n                        <Nav className=\"mr-auto\">\n                            <Nav.Link\n                                as={Link}\n                                to=\"/books/buy\"\n                                active={!props.myBooksLink}\n                            >\n                                Available Books\n                            </Nav.Link>\n                            <Nav.Link\n                                as={Link}\n                                to=\"/books/mylist\"\n                                active={props.myBooksLink}\n                            >\n                                My Books\n                            </Nav.Link>\n                            <Nav.Link onClick={handleClick_logOut}>\n                                Log Out\n                            </Nav.Link>\n                        </Nav>\n\n                        <SearchArea onSearch={props.onSearch} />\n                    </Navbar.Collapse>\n                </Navbar>\n            </div>\n\n            {logOut ? <Redirect to=\"/\" /> : null}\n        </>\n    );\n};\n\nexport default Header;\n","import * as React from \"react\";\nimport LoadingOverlay from \"react-loading-overlay-ts\";\n\nimport \"./LoadingScreen.css\";\n\n/**\n * A full screen loading component\n */\nconst LoadingScreen = (props: { show: boolean }) => {\n    return (\n        <div\n            className=\"loading-screen-container\"\n            style={{ display: props.show ? \"block\" : \"none\" }}\n        >\n            <LoadingOverlay active={props.show} spinner text=\"loading\">\n                <div className=\"loading-screen-content\"></div>\n            </LoadingOverlay>\n        </div>\n    );\n};\n\nexport default LoadingScreen;\n","import React from \"react\";\nimport { Button, Table } from \"react-bootstrap\";\nimport { Book } from \"../../../models\";\n\n/**\n * Row of the table\n */\nconst TableRow = (props: {\n    isMyBook: boolean;\n    book: Book;\n    onChange: (bookID: number) => void;\n}) => {\n    // define button caption and color\n    let buttonCaption = \"Order\";\n    let buttonVariant = \"outline-primary\";\n    if (props.isMyBook) {\n        buttonCaption = \"Remove\";\n        buttonVariant = \"outline-danger\";\n    }\n\n    return (\n        <tr>\n            <td>{props.book.id}</td>\n            <td>{props.book.title}</td>\n            <td>{props.book.description}</td>\n            <td>{props.book.genre}</td>\n            <td>{props.book.price.toFixed(2)}</td>\n            <td className=\"button-container\">\n                <Button\n                    variant={buttonVariant}\n                    onClick={() => props.onChange(props.book.id)}\n                >\n                    {buttonCaption}\n                </Button>\n            </td>\n        </tr>\n    );\n};\n\n/**\n * The whole table area\n */\nconst TableArea = (props: {\n    isMyBooksSet: boolean;\n    books: Book[];\n    onChange: (bookID: number) => void;\n}) => {\n    return (\n        <div className=\"table-area\">\n            <Table striped hover>\n                <thead>\n                    <tr>\n                        <th>ID</th>\n                        <th>Title</th>\n                        <th>Description</th>\n                        <th>Genre</th>\n                        <th>Price</th>\n                        <th></th>\n                    </tr>\n                </thead>\n\n                <tbody>\n                    {props.books.map((book) => (\n                        <TableRow\n                            isMyBook={props.isMyBooksSet}\n                            book={book}\n                            key={book.id}\n                            onChange={props.onChange}\n                        />\n                    ))}\n                </tbody>\n            </Table>\n        </div>\n    );\n};\n\nexport default TableArea;\n","import * as React from \"react\";\nimport { Alert } from \"react-bootstrap\";\n\n/**\n * Display an error message. The error message will be gone when the error is empty\n */\nconst ErrorAlert = (props: { error: string; onClose: () => void }) => {\n    return (\n        <>\n            {props.error !== \"\" ? (\n                <Alert variant=\"danger\" dismissible onClose={props.onClose}>\n                    {props.error}\n                </Alert>\n            ) : null}\n        </>\n    );\n};\n\nexport default ErrorAlert;\n","import * as React from \"react\";\nimport { useHistory, useParams } from \"react-router\";\nimport { Redirect } from \"react-router-dom\";\n\nimport Header from \"./components/Header\";\nimport LoadingScreen from \"../../components/LoadingScreen\";\nimport TableArea from \"./components/TableArea\";\nimport Connector from \"../../utils/Connector\";\nimport { Book } from \"../../models\";\nimport ErrorAlert from \"../../components/ErrorAlert\";\n\nimport \"./Books.css\";\n\n/**\n * Main books page component\n */\nconst Books = () => {\n    // states\n    const [isLoading, setIsLoading] = React.useState(true);\n    const [isLoggedIn, setIsLoggedIn] = React.useState(true);\n    const [books, setBooks] = React.useState<Book[]>([]);\n    const [error, setError] = React.useState(\"\");\n    const [searchedBooks, setSearchedBooks] = React.useState<Book[]>([]);\n\n    // get history hook\n    const history = useHistory();\n\n    // get parameters from URL\n    const { booksType } = useParams<{ booksType: string }>();\n\n    // redirect to 404 when invalid url is given\n    if (booksType !== \"buy\" && booksType !== \"mylist\") history.replace(\"/404\");\n\n    // easy trick\n    const isMyBooksPage = booksType === \"mylist\";\n\n    /**\n     * Handle buy or remove of a book\n     */\n    const handleBuyOrRemoveBook = (bookID: number) => {\n        // start loading\n        setIsLoading(true);\n        // remove or buy book\n        Connector.BuyOrRemoveBook(!isMyBooksPage, bookID)\n            .then(() => {\n                // copy books array fro state\n                const _books = books.slice();\n                // index of the book to be removed\n                const index = _books.findIndex((bk) => bk.id === bookID);\n                // remove book\n                _books.splice(index, 1);\n            })\n            .catch(() => setError(\"Check your internet connection\"))\n            .finally(() => setIsLoading(false));\n    };\n\n    /**\n     * Handle search\n     */\n    const handleSearch = (searchBy: string, searchText: string) => {\n        // roll back to original books if search string is empty\n        if (searchText === \"\") {\n            setSearchedBooks([]);\n        }\n        // search implementation\n        else {\n            const _books = books.filter((bk) => {\n                let propertyVal = (bk as any)[searchBy.toLowerCase()] as string;\n                return propertyVal\n                    .toLocaleLowerCase()\n                    .includes(searchText.toLocaleLowerCase());\n            });\n            setSearchedBooks(_books);\n        }\n    };\n\n    // check if user is loagged in\n    React.useEffect(() => {\n        // start loading\n        setIsLoading(true);\n\n        // detects if component is unmounted\n        let unmounted = false;\n\n        // get all available books\n        Connector.GetBooks(isMyBooksPage)\n            .then((books) => {\n                if (!unmounted) {\n                    setBooks(books as Book[]);\n                }\n            })\n            .catch((err) => {\n                // exit if unmounted\n                if (unmounted) return;\n                else if (err.message === \"401\") {\n                    setIsLoggedIn(false);\n                } else {\n                    setError(\"Check your internet connection\");\n                }\n            })\n            .finally(() => (!unmounted ? setIsLoading(false) : null));\n\n        // clean up\n        return () => {\n            unmounted = true;\n        };\n    }, [isMyBooksPage]);\n\n    return (\n        <>\n            <div className=\"books-page\">\n                <Header\n                    myBooksLink={isMyBooksPage}\n                    onLoading={(isLoading) => setIsLoading(isLoading)}\n                    onError={(err) => setError(err)}\n                    onSearch={handleSearch}\n                />\n\n                <TableArea\n                    isMyBooksSet={isMyBooksPage}\n                    books={searchedBooks.length === 0 ? books : searchedBooks}\n                    onChange={handleBuyOrRemoveBook}\n                />\n            </div>\n\n            <LoadingScreen show={isLoading} />\n\n            <ErrorAlert error={error} onClose={() => setError(\"\")} />\n\n            {!isLoggedIn ? <Redirect to=\"/\" /> : null}\n        </>\n    );\n};\n\nexport default Books;\n","import * as React from \"react\";\n\nconst PageNotFound = () => {\n    return (\n        <div\n            style={{\n                height: \"100vh\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n            }}\n        >\n            <img src=\"./images/404.png\" alt=\"404-page-not-found\" />\n        </div>\n    );\n};\n\nexport default PageNotFound;\n","import * as React from \"react\";\nimport { Redirect } from \"react-router\";\n\nimport LoadingScreen from \"../../components/LoadingScreen\";\nimport ErrorAlert from \"../../components/ErrorAlert\";\nimport Connector from \"../../utils/Connector\";\n\nimport \"./SignIn.css\";\n\n/**\n * Textbox field for sign in page\n */\nconst InputField = (props: {\n    placeholder: string;\n    type: string;\n    onChange: (value: string) => void;\n}) => {\n    return (\n        <div className=\"input-field\">\n            <input\n                type={props.type}\n                placeholder={props.placeholder}\n                onChange={(e) => props.onChange(e.target.value)}\n            />\n        </div>\n    );\n};\n\n/**\n * Sign in page\n */\nconst SignIn = () => {\n    // states\n    const [email, setEmail] = React.useState(\"\");\n    const [password, setPassword] = React.useState(\"\");\n    const [loading, setLoading] = React.useState(false);\n    const [error, setError] = React.useState(\"\");\n    const [loggedIn, setLoggedIn] = React.useState(false);\n\n    // Handle sign in button click\n    const handleClick = async () => {\n        // set loading true\n        setLoading(true);\n\n        // login\n        Connector.LogIn({ email: email, password: password })\n            .then((res) => {\n                if (!res) {\n                    setError(\"Invalid credentials\");\n                } else {\n                    setLoggedIn(true);\n                }\n            })\n            .catch(() => setError(\"Check your internet connection\"))\n            .finally(() => setLoading(false));\n    };\n\n    return (\n        <>\n            <div className=\"signin-page\">\n                <h1>Sign In to Continue</h1>\n\n                <form>\n                    <InputField\n                        type=\"text\"\n                        placeholder=\"User Name\"\n                        onChange={(val) => setEmail(val)}\n                    />\n                    <InputField\n                        type=\"password\"\n                        placeholder=\"Password\"\n                        onChange={(val) => setPassword(val)}\n                    />\n\n                    <button\n                        onClick={handleClick}\n                        disabled={loading}\n                        className=\"signin-button\"\n                    >\n                        Sign In\n                    </button>\n                </form>\n            </div>\n\n            <LoadingScreen show={loading} />\n\n            <ErrorAlert error={error} onClose={() => setError(\"\")} />\n\n            {loggedIn ? <Redirect to=\"/books/buy\" /> : null}\n        </>\n    );\n};\n\nexport default SignIn;\n","import axios from \"axios\";\nimport React, { useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport Books from \"./pages/Books/Books\";\nimport PageNotFound from \"./pages/PageNotFound/PageNotFound\";\nimport SignIn from \"./pages/SignIn/SignIn\";\n\nfunction App() {\n    // set axiom defaults\n    useEffect(() => {\n        axios.defaults.baseURL = \"http://localhost:8000/api/\";\n    });\n\n    return (\n        <Router>\n            <Switch>\n                <Route exact path=\"/\">\n                    <SignIn />\n                </Route>\n\n                <Route exact path=\"/books/:booksType\">\n                    <Books />\n                </Route>\n\n                <Route exact path=\"*\">\n                    <PageNotFound />\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\n\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}